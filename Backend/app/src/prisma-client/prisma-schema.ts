// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateFriendRequest {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUnreadConversations {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  post: Post!
  createdBy: User!
  createdAt: DateTime!
  content: String!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  post: PostCreateOneWithoutCommentsInput!
  createdBy: UserCreateOneInput!
  content: String!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  createdBy: UserCreateOneInput!
  content: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  post: PostUpdateOneRequiredWithoutCommentsInput
  createdBy: UserUpdateOneRequiredInput
  content: String
}

input CommentUpdateManyDataInput {
  content: String
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  createdBy: UserUpdateOneRequiredInput
  content: String
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  post: PostWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Conversation {
  id: ID!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
}

type ConversationConnection {
  pageInfo: PageInfo!
  edges: [ConversationEdge]!
  aggregate: AggregateConversation!
}

input ConversationCreateInput {
  id: ID
  users: UserCreateManyWithoutConversationsInput
  messages: MessageCreateManyWithoutConversationInput
}

input ConversationCreateManyWithoutUsersInput {
  create: [ConversationCreateWithoutUsersInput!]
  connect: [ConversationWhereUniqueInput!]
}

input ConversationCreateOneInput {
  create: ConversationCreateInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateWithoutMessagesInput {
  id: ID
  users: UserCreateManyWithoutConversationsInput
}

input ConversationCreateWithoutUsersInput {
  id: ID
  messages: MessageCreateManyWithoutConversationInput
}

type ConversationEdge {
  node: Conversation!
  cursor: String!
}

enum ConversationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConversationPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input ConversationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ConversationScalarWhereInput!]
  OR: [ConversationScalarWhereInput!]
  NOT: [ConversationScalarWhereInput!]
}

type ConversationSubscriptionPayload {
  mutation: MutationType!
  node: Conversation
  updatedFields: [String!]
  previousValues: ConversationPreviousValues
}

input ConversationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConversationWhereInput
  AND: [ConversationSubscriptionWhereInput!]
  OR: [ConversationSubscriptionWhereInput!]
  NOT: [ConversationSubscriptionWhereInput!]
}

input ConversationUpdateDataInput {
  users: UserUpdateManyWithoutConversationsInput
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateInput {
  users: UserUpdateManyWithoutConversationsInput
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateManyWithoutUsersInput {
  create: [ConversationCreateWithoutUsersInput!]
  delete: [ConversationWhereUniqueInput!]
  connect: [ConversationWhereUniqueInput!]
  set: [ConversationWhereUniqueInput!]
  disconnect: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [ConversationScalarWhereInput!]
}

input ConversationUpdateOneRequiredInput {
  create: ConversationCreateInput
  update: ConversationUpdateDataInput
  upsert: ConversationUpsertNestedInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateOneRequiredWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateWithoutMessagesDataInput {
  users: UserUpdateManyWithoutConversationsInput
}

input ConversationUpdateWithoutUsersDataInput {
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateWithWhereUniqueWithoutUsersInput {
  where: ConversationWhereUniqueInput!
  data: ConversationUpdateWithoutUsersDataInput!
}

input ConversationUpsertNestedInput {
  update: ConversationUpdateDataInput!
  create: ConversationCreateInput!
}

input ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput!
  create: ConversationCreateWithoutMessagesInput!
}

input ConversationUpsertWithWhereUniqueWithoutUsersInput {
  where: ConversationWhereUniqueInput!
  update: ConversationUpdateWithoutUsersDataInput!
  create: ConversationCreateWithoutUsersInput!
}

input ConversationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
}

input ConversationWhereUniqueInput {
  id: ID
}

scalar DateTime

type FriendRequest {
  id: ID!
  fromUser: User!
  toUser: User!
  createdAt: DateTime!
}

type FriendRequestConnection {
  pageInfo: PageInfo!
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  id: ID
  fromUser: UserCreateOneWithoutOutgoingFriendRequestsInput!
  toUser: UserCreateOneWithoutIncomingFriendRequestsInput!
}

input FriendRequestCreateManyWithoutFromUserInput {
  create: [FriendRequestCreateWithoutFromUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateManyWithoutToUserInput {
  create: [FriendRequestCreateWithoutToUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateWithoutFromUserInput {
  id: ID
  toUser: UserCreateOneWithoutIncomingFriendRequestsInput!
}

input FriendRequestCreateWithoutToUserInput {
  id: ID
  fromUser: UserCreateOneWithoutOutgoingFriendRequestsInput!
}

type FriendRequestEdge {
  node: FriendRequest!
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type FriendRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input FriendRequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FriendRequestScalarWhereInput!]
  OR: [FriendRequestScalarWhereInput!]
  NOT: [FriendRequestScalarWhereInput!]
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
  AND: [FriendRequestSubscriptionWhereInput!]
  OR: [FriendRequestSubscriptionWhereInput!]
  NOT: [FriendRequestSubscriptionWhereInput!]
}

input FriendRequestUpdateInput {
  fromUser: UserUpdateOneRequiredWithoutOutgoingFriendRequestsInput
  toUser: UserUpdateOneRequiredWithoutIncomingFriendRequestsInput
}

input FriendRequestUpdateManyWithoutFromUserInput {
  create: [FriendRequestCreateWithoutFromUserInput!]
  delete: [FriendRequestWhereUniqueInput!]
  connect: [FriendRequestWhereUniqueInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutFromUserInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutFromUserInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
}

input FriendRequestUpdateManyWithoutToUserInput {
  create: [FriendRequestCreateWithoutToUserInput!]
  delete: [FriendRequestWhereUniqueInput!]
  connect: [FriendRequestWhereUniqueInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutToUserInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutToUserInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
}

input FriendRequestUpdateWithoutFromUserDataInput {
  toUser: UserUpdateOneRequiredWithoutIncomingFriendRequestsInput
}

input FriendRequestUpdateWithoutToUserDataInput {
  fromUser: UserUpdateOneRequiredWithoutOutgoingFriendRequestsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutFromUserInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutFromUserDataInput!
}

input FriendRequestUpdateWithWhereUniqueWithoutToUserInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutToUserDataInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutFromUserInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutFromUserDataInput!
  create: FriendRequestCreateWithoutFromUserInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutToUserInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutToUserDataInput!
  create: FriendRequestCreateWithoutToUserInput!
}

input FriendRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fromUser: UserWhereInput
  toUser: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FriendRequestWhereInput!]
  OR: [FriendRequestWhereInput!]
  NOT: [FriendRequestWhereInput!]
}

input FriendRequestWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  user: User!
  conversation: Conversation!
  content: String!
  createdAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  user: UserCreateOneInput!
  conversation: ConversationCreateOneWithoutMessagesInput!
  content: String!
}

input MessageCreateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutConversationInput {
  id: ID
  user: UserCreateOneInput!
  content: String!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  user: UserUpdateOneRequiredInput
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  content: String
}

input MessageUpdateManyDataInput {
  content: String
}

input MessageUpdateManyMutationInput {
  content: String
}

input MessageUpdateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutConversationDataInput {
  user: UserUpdateOneRequiredInput
  content: String
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutConversationDataInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutConversationDataInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  conversation: ConversationWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createConversation(data: ConversationCreateInput!): Conversation!
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  upsertConversation(where: ConversationWhereUniqueInput!, create: ConversationCreateInput!, update: ConversationUpdateInput!): Conversation!
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteManyConversations(where: ConversationWhereInput): BatchPayload!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUnreadConversations(data: UnreadConversationsCreateInput!): UnreadConversations!
  updateUnreadConversations(data: UnreadConversationsUpdateInput!, where: UnreadConversationsWhereUniqueInput!): UnreadConversations
  upsertUnreadConversations(where: UnreadConversationsWhereUniqueInput!, create: UnreadConversationsCreateInput!, update: UnreadConversationsUpdateInput!): UnreadConversations!
  deleteUnreadConversations(where: UnreadConversationsWhereUniqueInput!): UnreadConversations
  deleteManyUnreadConversationses(where: UnreadConversationsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdBy: User!
  createdAt: DateTime!
  content: String!
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutPostsInput!
  content: String!
  likes: UserCreateManyInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutCreatedByInput {
  create: [PostCreateWithoutCreatedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  createdBy: UserCreateOneWithoutPostsInput!
  content: String!
  likes: UserCreateManyInput
}

input PostCreateWithoutCreatedByInput {
  id: ID
  content: String!
  likes: UserCreateManyInput
  comments: CommentCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutPostsInput
  content: String
  likes: UserUpdateManyInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  content: String
}

input PostUpdateManyMutationInput {
  content: String
}

input PostUpdateManyWithoutCreatedByInput {
  create: [PostCreateWithoutCreatedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  createdBy: UserUpdateOneRequiredWithoutPostsInput
  content: String
  likes: UserUpdateManyInput
}

input PostUpdateWithoutCreatedByDataInput {
  content: String
  likes: UserUpdateManyInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutCreatedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCreatedByDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutCreatedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCreatedByDataInput!
  create: PostCreateWithoutCreatedByInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation]!
  conversationsConnection(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationConnection!
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  unreadConversations(where: UnreadConversationsWhereUniqueInput!): UnreadConversations
  unreadConversationses(where: UnreadConversationsWhereInput, orderBy: UnreadConversationsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UnreadConversations]!
  unreadConversationsesConnection(where: UnreadConversationsWhereInput, orderBy: UnreadConversationsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnreadConversationsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  conversation(where: ConversationSubscriptionWhereInput): ConversationSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  unreadConversations(where: UnreadConversationsSubscriptionWhereInput): UnreadConversationsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UnreadConversations {
  id: ID!
  conversation: Conversation!
  user: User!
}

type UnreadConversationsConnection {
  pageInfo: PageInfo!
  edges: [UnreadConversationsEdge]!
  aggregate: AggregateUnreadConversations!
}

input UnreadConversationsCreateInput {
  id: ID
  conversation: ConversationCreateOneInput!
  user: UserCreateOneInput!
}

type UnreadConversationsEdge {
  node: UnreadConversations!
  cursor: String!
}

enum UnreadConversationsOrderByInput {
  id_ASC
  id_DESC
}

type UnreadConversationsPreviousValues {
  id: ID!
}

type UnreadConversationsSubscriptionPayload {
  mutation: MutationType!
  node: UnreadConversations
  updatedFields: [String!]
  previousValues: UnreadConversationsPreviousValues
}

input UnreadConversationsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UnreadConversationsWhereInput
  AND: [UnreadConversationsSubscriptionWhereInput!]
  OR: [UnreadConversationsSubscriptionWhereInput!]
  NOT: [UnreadConversationsSubscriptionWhereInput!]
}

input UnreadConversationsUpdateInput {
  conversation: ConversationUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
}

input UnreadConversationsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  conversation: ConversationWhereInput
  user: UserWhereInput
  AND: [UnreadConversationsWhereInput!]
  OR: [UnreadConversationsWhereInput!]
  NOT: [UnreadConversationsWhereInput!]
}

input UnreadConversationsWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  fullName: String!
  email: String!
  password: String!
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation!]
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  outgoingFriendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  incomingFriendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  fullName: String!
  email: String!
  password: String!
  conversations: ConversationCreateManyWithoutUsersInput
  friends: UserCreateManyInput
  posts: PostCreateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestCreateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestCreateManyWithoutToUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutConversationsInput {
  create: [UserCreateWithoutConversationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIncomingFriendRequestsInput {
  create: UserCreateWithoutIncomingFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOutgoingFriendRequestsInput {
  create: UserCreateWithoutOutgoingFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutConversationsInput {
  id: ID
  fullName: String!
  email: String!
  password: String!
  friends: UserCreateManyInput
  posts: PostCreateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestCreateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestCreateManyWithoutToUserInput
}

input UserCreateWithoutIncomingFriendRequestsInput {
  id: ID
  fullName: String!
  email: String!
  password: String!
  conversations: ConversationCreateManyWithoutUsersInput
  friends: UserCreateManyInput
  posts: PostCreateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestCreateManyWithoutFromUserInput
}

input UserCreateWithoutOutgoingFriendRequestsInput {
  id: ID
  fullName: String!
  email: String!
  password: String!
  conversations: ConversationCreateManyWithoutUsersInput
  friends: UserCreateManyInput
  posts: PostCreateManyWithoutCreatedByInput
  incomingFriendRequests: FriendRequestCreateManyWithoutToUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  fullName: String!
  email: String!
  password: String!
  conversations: ConversationCreateManyWithoutUsersInput
  friends: UserCreateManyInput
  outgoingFriendRequests: FriendRequestCreateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestCreateManyWithoutToUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  fullName: String!
  email: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  fullName: String
  email: String
  password: String
  conversations: ConversationUpdateManyWithoutUsersInput
  friends: UserUpdateManyInput
  posts: PostUpdateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestUpdateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestUpdateManyWithoutToUserInput
}

input UserUpdateInput {
  fullName: String
  email: String
  password: String
  conversations: ConversationUpdateManyWithoutUsersInput
  friends: UserUpdateManyInput
  posts: PostUpdateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestUpdateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestUpdateManyWithoutToUserInput
}

input UserUpdateManyDataInput {
  fullName: String
  email: String
  password: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  fullName: String
  email: String
  password: String
}

input UserUpdateManyWithoutConversationsInput {
  create: [UserCreateWithoutConversationsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConversationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConversationsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutIncomingFriendRequestsInput {
  create: UserCreateWithoutIncomingFriendRequestsInput
  update: UserUpdateWithoutIncomingFriendRequestsDataInput
  upsert: UserUpsertWithoutIncomingFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOutgoingFriendRequestsInput {
  create: UserCreateWithoutOutgoingFriendRequestsInput
  update: UserUpdateWithoutOutgoingFriendRequestsDataInput
  upsert: UserUpsertWithoutOutgoingFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutConversationsDataInput {
  fullName: String
  email: String
  password: String
  friends: UserUpdateManyInput
  posts: PostUpdateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestUpdateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestUpdateManyWithoutToUserInput
}

input UserUpdateWithoutIncomingFriendRequestsDataInput {
  fullName: String
  email: String
  password: String
  conversations: ConversationUpdateManyWithoutUsersInput
  friends: UserUpdateManyInput
  posts: PostUpdateManyWithoutCreatedByInput
  outgoingFriendRequests: FriendRequestUpdateManyWithoutFromUserInput
}

input UserUpdateWithoutOutgoingFriendRequestsDataInput {
  fullName: String
  email: String
  password: String
  conversations: ConversationUpdateManyWithoutUsersInput
  friends: UserUpdateManyInput
  posts: PostUpdateManyWithoutCreatedByInput
  incomingFriendRequests: FriendRequestUpdateManyWithoutToUserInput
}

input UserUpdateWithoutPostsDataInput {
  fullName: String
  email: String
  password: String
  conversations: ConversationUpdateManyWithoutUsersInput
  friends: UserUpdateManyInput
  outgoingFriendRequests: FriendRequestUpdateManyWithoutFromUserInput
  incomingFriendRequests: FriendRequestUpdateManyWithoutToUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConversationsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutIncomingFriendRequestsInput {
  update: UserUpdateWithoutIncomingFriendRequestsDataInput!
  create: UserCreateWithoutIncomingFriendRequestsInput!
}

input UserUpsertWithoutOutgoingFriendRequestsInput {
  update: UserUpdateWithoutOutgoingFriendRequestsDataInput!
  create: UserCreateWithoutOutgoingFriendRequestsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConversationsDataInput!
  create: UserCreateWithoutConversationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  conversations_every: ConversationWhereInput
  conversations_some: ConversationWhereInput
  conversations_none: ConversationWhereInput
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  outgoingFriendRequests_every: FriendRequestWhereInput
  outgoingFriendRequests_some: FriendRequestWhereInput
  outgoingFriendRequests_none: FriendRequestWhereInput
  incomingFriendRequests_every: FriendRequestWhereInput
  incomingFriendRequests_some: FriendRequestWhereInput
  incomingFriendRequests_none: FriendRequestWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`